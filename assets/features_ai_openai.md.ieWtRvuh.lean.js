import{_ as l,D as n,c as o,j as e,a as i,I as t,a4 as a,o as d}from"./chunks/framework.z18ruK2m.js";const W=JSON.parse('{"title":"OpenAI","description":"","frontmatter":{},"headers":[],"relativePath":"features/ai/openai.md","filePath":"features/ai/openai.md","lastUpdated":1723192596000}'),p={name:"features/ai/openai.md"},h=a("",11),c=e("code",null,"temperature",-1),r=e("code",null,"max_tokens",-1),k=e("li",null,[e("code",null,"api_key"),i(": Your OpenAI API key.")],-1),u=e("code",null,"default",-1),m=e("code",null,"Models",-1),y=e("code",null,"Models.<model>",-1),E=e("code",null,"base_url",-1),g=e("code",null,"api_key",-1),_=e("code",null,"real_id",-1),f=e("code",null,"provider_name",-1),b=a("",7),F=e("code",null,"status",-1),T=e("code",null,"capabilities",-1),A=e("code",null,"image_generation",-1),C=e("code",null,"web_search",-1),x=e("code",null,"vision",-1),v=e("code",null,"Endpoints",-1),I=e("code",null,"base_url",-1),w=e("code",null,"api_key",-1),O=e("code",null,"tag",-1),B=e("code",null,"display_models",-1),P=e("em",null,[e("strong",null,"Once you set this parameter, the model list will be displayed in the order you set.")],-1),q=e("code",null,"addon_models",-1),D=e("code",null,"banned_models",-1),M=a("",4);function S(N,V,R,Y,U,G){const s=n("Badge");return d(),o("div",null,[h,e("ul",null,[e("li",null,[c,i(": The temperature of the model. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[r,i(": The maximum tokens of the model. "),t(s,{type:"info",text:"Optional"})]),k,e("li",null,[u,i(": The default model to use. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[m,i(": The custom models to use. "),t(s,{type:"info",text:"Optional"}),e("ul",null,[e("li",null,[y,i(": The model name. "),e("ul",null,[e("li",null,[E,i(": The base URL of the model. "),t(s,{type:"info",text:"Optional"}),i(),t(s,{type:"warning",text:"^v0.5.0-beta.2"})]),e("li",null,[g,i(": The API key of the model. "),t(s,{type:"info",text:"Optional"}),i(),t(s,{type:"warning",text:"^v0.5.0-beta.2"})]),e("li",null,[_,i(": The real id of the model. "),t(s,{type:"info",text:"Optional"}),i(),t(s,{type:"warning",text:"^v0.5.0-beta.2"})]),e("li",null,[f,i(": The provider name of the model. "),t(s,{type:"info",text:"Optional"}),i(),t(s,{type:"warning",text:"^v0.5.0-beta.2"})]),b,e("li",null,[F,i(": The status of the model. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[T,i(": The capabilities of the model. "),t(s,{type:"info",text:"Optional"}),e("ul",null,[e("li",null,[A,i(": The image generation capability. (Need DALL supported) "),t(s,{type:"info",text:"Optional"})]),e("li",null,[C,i(": The web search capability. (Function Call) "),t(s,{type:"info",text:"Optional"})]),e("li",null,[x,i(": The vision capability. (Need model supported) "),t(s,{type:"info",text:"Optional"})])])])])])])]),e("li",null,[v,i(": Custom endpoints "),t(s,{type:"info",text:"Optional"}),i(),t(s,{type:"warning",text:"^v0.7.0-beta.1"}),e("ul",null,[e("li",null,[I,i(": The base URL of the endpoint. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[w,i(": The API key of the endpoint. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[O,i(": The tag of the endpoint. It will be displayed in the model list. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[B,i(": The models to display in the model list. "),P,i(),t(s,{type:"info",text:"Optional"})]),e("li",null,[q,i(": The models to add to the model list. "),t(s,{type:"info",text:"Optional"})]),e("li",null,[D,i(": The models to ban from the model list. "),t(s,{type:"info",text:"Optional"})])])])]),M])}const $=l(p,[["render",S]]);export{W as __pageData,$ as default};
